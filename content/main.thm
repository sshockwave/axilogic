# not
express # definition
    symbol
        concept not
    pop
pop
express # axiom
    symbol # a
        express
            refer not
                refer not
                    push 1 apply
                apply
            assume # not(not(a))
            push 1
                export double_neg
            pop
        pop
    pop
pop

# Formal statement calculus-L
# infer: A -> B
express
    symbol # a
        symbol # b
            concept infer # a->b
            refer infer # a>(b>a)
                push 1 apply
                refer infer # B->A
                    push 2 apply
                    push 1 apply
                apply
                export fo_l1 # \a\b a>(b>a)
            pop
            symbol # c
                refer infer # (a>(b>c))>((a>b)>(a>c))
                    refer infer # a>(b>c)
                        push 1 apply
                        refer infer # b>c
                            push 2 apply
                            push 3 apply
                        apply
                    apply
                    refer infer
                        refer infer # a>b
                            push 1 apply
                            push 2 apply
                        apply
                        refer infer # a>c
                            push 1 apply
                            push 3 apply
                        apply
                    apply
                    export fo_l2 # \a\b\c (a->(b->c))->((a->b)->(a->c))
                pop
            pop
            refer infer
                refer infer # not(a)>not(b)
                    refer not
                        push 1 apply
                    apply
                    refer not
                        push 2 apply
                    apply
                apply
                refer infer # b>a
                    push 2 apply
                    push 1 apply
                apply
                export fo_l3 # (not(a)>not(b))>(b>a)
            pop
            express refer infer push 1 apply push 2 apply assume # assume a>b
                express push 1 assume # assume a
                    push 1
                        export mp
                    pop
                pop
            pop
        pop
    pop
    express refer double_neg assume
        express refer mp assume
            express refer fo_l1 assume
                express refer fo_l2 assume
                    express refer fo_l3 assume
                        concept prop_logic
                    pop
                pop
            pop
        pop
    pop
pop

# Hypothetical Syllogism
express refer prop_logic assume
    symbol # a: 1
        symbol # b: 2
            symbol #c: 3
                express refer infer push 1 apply push 2 apply assume # a>b: 4
                    express refer infer push 2 apply push 3 apply assume # b>c: 5
                        push 0 # prop_logic
                            unbind pop # double_neg
                            unbind swap # mp: 6
                                unbind swap # fo_l1: 7
                                    unbind swap pop # fo_l2: 8
                                    push 6 push 5 apply push 1 apply # (b>c)>(a>(b>c))
                                        push 5 apply # a>(b>c)
                                    apply # (a>b)>(a>c)
                                    push 7 swap apply # a>c
                                    export hs
                                pop
                            pop
                        pop
                    pop
                pop
            pop
        pop
    pop
pop
